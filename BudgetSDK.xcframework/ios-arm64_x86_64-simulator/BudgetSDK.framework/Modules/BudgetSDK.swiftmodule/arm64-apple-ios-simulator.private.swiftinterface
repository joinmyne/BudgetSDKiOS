// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios17.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BudgetSDK
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Charts
import Combine
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol MyneTransactionDetailsScreenControllerDelegate : AnyObject {
  func didTapOnDeleteButton()
  func didTapOnCategory()
}
public class MyneTransactionDetailsScreenController : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($transactionDetails) public var transactionDetails: BudgetSDK.TransactionDetails? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $transactionDetails: Combine.Published<BudgetSDK.TransactionDetails?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  weak public var delegate: (any BudgetSDK.MyneTransactionDetailsScreenControllerDelegate)?
  public init()
  public func showScreen() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
final public class SpendingModule : Combine.ObservableObject, BudgetSDK.SpendingModuleProtocol, BudgetSDK.BudgetSDKModuleBase, BudgetSDK.ModuleAccessible {
  final public let moduleType: BudgetSDK.BudgetSDKModule
  final public let accessValidator: any BudgetSDK.ModuleAccessValidator
  required public init(accessValidator: any BudgetSDK.ModuleAccessValidator)
  final public var dashboard: BudgetSDK.MyneDashboardScreenController? {
    get
  }
  final public var spendingCategory: BudgetSDK.MyneSpendingCategoryScreenController? {
    get
  }
  final public var category: BudgetSDK.MyneCategoryViewScreenController? {
    get
  }
  final public var trending: BudgetSDK.MyneTrendViewScreenController? {
    get
  }
  final public var transactionsOverView: BudgetSDK.MyneTrasnsactionsOverViewController? {
    get
  }
  final public var filter: BudgetSDK.MyneFilterScreenController? {
    get
  }
  final public var transactionDetails: BudgetSDK.MyneTransactionDetailsScreenController? {
    get
  }
  final public var transactionCategory: BudgetSDK.MyneTransactionCategoryScreenController? {
    get
  }
  final public var subCategory: BudgetSDK.MyneSubCategoryScreenController? {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public protocol MyneSpendingLimitCreationScreenControllerDelegate : AnyObject {
  func didTapOnSaveLimit(isRepeatAll: Swift.Bool, updatedCategories: [BudgetSDK.SpendingCategoryModel])
}
@_hasMissingDesignatedInitializers public class MyneSpendingLimitCreationScreenController : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isRepeatForAllEveryMonth) public var isRepeatForAllEveryMonth: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isRepeatForAllEveryMonth: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($currency) public var currency: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $currency: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($categories) public var categories: [BudgetSDK.SpendingCategoryModel] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $categories: Combine.Published<[BudgetSDK.SpendingCategoryModel]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  weak public var delegate: (any BudgetSDK.MyneSpendingLimitCreationScreenControllerDelegate)?
  public func showDashboard() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public protocol MyneCategoryViewScreenDelegate : AnyObject {
  func didTapOnSaveBankAccounts(bankAccounts: [BudgetSDK.BankAccount])
  func didSelectDateRange(startDate: Foundation.Date?, endDate: Foundation.Date?)
  func didTapOnChartBar(chartDataItem: [BudgetSDK.ChartDataItem])
  func didTapOnSeeTrend()
}
public class MyneCategoryViewScreenController : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($amountSpent) public var amountSpent: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $amountSpent: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($stackedBarChartItems) public var stackedBarChartItems: [BudgetSDK.ChartDataItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $stackedBarChartItems: Combine.Published<[BudgetSDK.ChartDataItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($transactionsData) public var transactionsData: [BudgetSDK.TransactionViewRowData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $transactionsData: Combine.Published<[BudgetSDK.TransactionViewRowData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  weak public var delegate: (any BudgetSDK.MyneCategoryViewScreenDelegate)?
  public init()
  public func showAccountAndDateSection(bankAccounts: [BudgetSDK.Bank]) -> some SwiftUICore.View
  
  public func showStackedBardChart(config: BudgetSDK.StackedBarSectionConfiguration) -> some SwiftUICore.View
  
  public func showTransactionsList() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct DateSelectorFieldView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(selectedDate: SwiftUICore.Binding<Foundation.Date?>, title: Swift.String? = nil, dateFormat: Swift.String = "MMM dd, yyyy", onDateSelected: ((Foundation.Date) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9BudgetSDK21DateSelectorFieldViewV4bodyQrvp", 0) __
}
extension BudgetSDK.DateSelectorFieldView {
  @_Concurrency.MainActor @preconcurrency public init(selectedDate: SwiftUICore.Binding<Foundation.Date?>, title: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public init(selectedDate: SwiftUICore.Binding<Foundation.Date?>, title: Swift.String? = nil, dateFormat: Swift.String, onSelection: @escaping (Foundation.Date) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public init(selectedDate: SwiftUICore.Binding<Foundation.Date?>, title: Swift.String? = nil, onSelection: @escaping (Foundation.Date) -> Swift.Void)
}
public protocol MyneTrendViewScreenDelegate : AnyObject {
}
public class MyneTrendViewScreenController : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($amountSpent) public var amountSpent: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $amountSpent: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($stackedBarChartItems) public var stackedBarChartItems: [BudgetSDK.ChartDataItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $stackedBarChartItems: Combine.Published<[BudgetSDK.ChartDataItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($averageSpentData) public var averageSpentData: BudgetSDK.SpendingWidgetViewData {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $averageSpentData: Combine.Published<BudgetSDK.SpendingWidgetViewData>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($lastTwelveMonthSpentData) public var lastTwelveMonthSpentData: BudgetSDK.SpendingWidgetViewData {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $lastTwelveMonthSpentData: Combine.Published<BudgetSDK.SpendingWidgetViewData>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($momChangeSpentData) public var momChangeSpentData: BudgetSDK.SpendingWidgetViewData {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $momChangeSpentData: Combine.Published<BudgetSDK.SpendingWidgetViewData>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($peakMonthSpentData) public var peakMonthSpentData: BudgetSDK.SpendingWidgetViewData {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $peakMonthSpentData: Combine.Published<BudgetSDK.SpendingWidgetViewData>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  weak public var delegate: (any BudgetSDK.MyneTrendViewScreenDelegate)?
  public init()
  public func showStackedBarChart(config: BudgetSDK.StackedBarSectionConfiguration) -> some SwiftUICore.View
  
  public func showSpendingWidgetsView() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol MyneTransactionCategoryScreenControllerDelegate : AnyObject {
  func didSelectCategory(_ category: BudgetSDK.SpendingCategoryBoxData)
}
public class MyneTransactionCategoryScreenController : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($categories) public var categories: [BudgetSDK.SpendingCategoryBoxData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $categories: Combine.Published<[BudgetSDK.SpendingCategoryBoxData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  weak public var delegate: (any BudgetSDK.MyneTransactionCategoryScreenControllerDelegate)?
  public init()
  public func selectCategory(_ category: BudgetSDK.SpendingCategoryBoxData)
  public func showScreen() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CurrencySelectorFieldView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(selectedCurrency: SwiftUICore.Binding<BudgetSDK.CurrencyDataModel?>, title: Swift.String? = nil, currencies: [BudgetSDK.CurrencyDataModel] = CurrencyDataModel.defaultCurrencies, onCurrencySelected: ((BudgetSDK.CurrencyDataModel) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9BudgetSDK25CurrencySelectorFieldViewV4bodyQrvp", 0) __
}
extension BudgetSDK.CurrencyDataModel {
  public static let defaultCurrencies: [BudgetSDK.CurrencyDataModel]
}
extension BudgetSDK.CurrencySelectorFieldView {
  @_Concurrency.MainActor @preconcurrency public init(selectedCurrency: SwiftUICore.Binding<BudgetSDK.CurrencyDataModel?>, title: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public init(selectedCurrency: SwiftUICore.Binding<BudgetSDK.CurrencyDataModel?>, title: Swift.String? = nil, currencies: [BudgetSDK.CurrencyDataModel], onSelection: @escaping (BudgetSDK.CurrencyDataModel) -> Swift.Void)
}
extension BudgetSDK.BankAccount {
  public var displayText: Swift.String {
    get
  }
  public var shortDisplayText: Swift.String {
    get
  }
  public var displayTextWithBalance: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct BankAccountSelectorFieldView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(selectedBankAccount: SwiftUICore.Binding<BudgetSDK.BankAccount?>, title: Swift.String? = nil, onTap: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9BudgetSDK28BankAccountSelectorFieldViewV4bodyQrvp", 0) __
}
extension BudgetSDK.BankAccountSelectorFieldView {
  @_Concurrency.MainActor @preconcurrency public init(selectedBankAccount: SwiftUICore.Binding<BudgetSDK.BankAccount?>, title: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public init(selectedBankAccount: SwiftUICore.Binding<BudgetSDK.BankAccount?>, title: Swift.String? = nil, onSelection: @escaping () -> Swift.Void)
}
public struct SpendingCategoryData : Swift.Hashable {
  public var id: Swift.String
  public var iconURL: Swift.String
  public var title: Swift.String
  public var subtitle: Swift.String
  public var trailingValue: Swift.String
  public init(id: Swift.String, iconURL: Swift.String, title: Swift.String, subtitle: Swift.String, trailingValue: Swift.String)
  public static func == (a: BudgetSDK.SpendingCategoryData, b: BudgetSDK.SpendingCategoryData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransactionViewRowData : Swift.Hashable {
  public var id: Swift.String
  public var iconURL: Swift.String
  public var name: Swift.String
  public var dateAndTime: Swift.String
  public var value: Swift.String
  public var categoryName: Swift.String
  public init(id: Swift.String, iconURL: Swift.String, name: Swift.String, dateAndTime: Swift.String, value: Swift.String, categoryName: Swift.String)
  public static func == (a: BudgetSDK.TransactionViewRowData, b: BudgetSDK.TransactionViewRowData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MyneFilterScreenControllerDelegate : AnyObject {
  func didTapOnApplyFilter(selectedFilterTypes: [BudgetSDK.FilterType], selectedCategories: [BudgetSDK.SpendingCategoryBoxData])
}
public class MyneFilterScreenController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneFilterScreenControllerDelegate)?
  public init()
  public func configure(groupedFilters: [BudgetSDK.GroupedFilter], categories: [BudgetSDK.SpendingCategoryBoxData])
  public func showFilterScreen() -> some SwiftUICore.View
  
  public func showActionButtons() -> some SwiftUICore.View
  
  public func selectFilter(_ filterType: BudgetSDK.FilterType, inGroup group: BudgetSDK.GroupedFilter)
  public func selectCategory(_ category: BudgetSDK.SpendingCategoryBoxData)
  public func clearSelections()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public protocol MyneSavingGoalsDashboardControllerDelegate : AnyObject {
  func didTapOnSavingGoal(goal: BudgetSDK.SavingGoalsProgressViewData)
  func didTapOnWidget()
}
@_hasMissingDesignatedInitializers public class MyneSavingGoalsDashboardController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneSavingGoalsDashboardControllerDelegate)?
  @Combine.Published @_projectedValueProperty($savingGoalsList) public var savingGoalsList: [BudgetSDK.SavingGoalsProgressViewData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $savingGoalsList: Combine.Published<[BudgetSDK.SavingGoalsProgressViewData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func showDashboard() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct TransactionDetails : Swift.Hashable {
  public init(id: Swift.String, iconURL: Swift.String, name: Swift.String, amount: Swift.String, account: Swift.String, status: Swift.String, category: Swift.String, categoryURL: Swift.String?)
  public static func == (a: BudgetSDK.TransactionDetails, b: BudgetSDK.TransactionDetails) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

public protocol MyneSavingGoalsIconsControllerDelegate : AnyObject {
  func didTapOnSaveButton(savingGoal: BudgetSDK.SavingGoalIconWidgetViewData)
  func didTapOnCancelButton()
}
public class MyneSavingGoalsIconsController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneSavingGoalsIconsControllerDelegate)?
  @Combine.Published @_projectedValueProperty($savingGoalIcons) public var savingGoalIcons: [BudgetSDK.SavingGoalIconWidgetViewData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $savingGoalIcons: Combine.Published<[BudgetSDK.SavingGoalIconWidgetViewData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedGoalId) public var selectedGoalId: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedGoalId: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func showScreen() -> some SwiftUICore.View
  
  public func loadSavingGoalIcons(_ icons: [BudgetSDK.SavingGoalIconWidgetViewData])
  public func selectGoal(_ goalId: Swift.String)
  public func isGoalSelected(_ goalId: Swift.String) -> Swift.Bool
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SpendingLimitOverallModel {
  public init(savedAmount: Swift.String, targetAmount: Swift.String, isClickable: Swift.Bool)
}
final public class CashFlowModule : Combine.ObservableObject, BudgetSDK.CashFlowModuleProtocol, BudgetSDK.BudgetSDKModuleBase, BudgetSDK.ModuleAccessible {
  final public let moduleType: BudgetSDK.BudgetSDKModule
  final public let accessValidator: any BudgetSDK.ModuleAccessValidator
  required public init(accessValidator: any BudgetSDK.ModuleAccessValidator)
  final public var dashboard: BudgetSDK.MyneCashFlowDashboardController? {
    get
  }
  final public var details: BudgetSDK.MyneCashFlowDetailsController? {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public protocol MyneDashboardScreenDelegate : AnyObject {
  func didTapOnChartBar(items: [BudgetSDK.ChartDataItem])
  func didTapOnSpendingCategoryRow(object: BudgetSDK.SpendingCategoryData)
  func didTapOnTransactionRow(object: BudgetSDK.TransactionViewRowData)
  func didTapOnSaveBankAccounts(bankAccounts: [BudgetSDK.BankAccount])
  func didSelectDateRange(startDate: Foundation.Date?, endDate: Foundation.Date?)
  func didTapOnSpendingCategoryViewAll()
  func didTapOnTransactionViewAll()
}
public class MyneDashboardScreenController : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isLoadingScreen) public var isLoadingScreen: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isLoadingScreen: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  weak public var delegate: (any BudgetSDK.MyneDashboardScreenDelegate)?
  @Combine.Published @_projectedValueProperty($stackedBarChartItems) public var stackedBarChartItems: [BudgetSDK.ChartDataItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $stackedBarChartItems: Combine.Published<[BudgetSDK.ChartDataItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($spendingCategoryListData) public var spendingCategoryListData: [BudgetSDK.SpendingCategoryData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $spendingCategoryListData: Combine.Published<[BudgetSDK.SpendingCategoryData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($transactionListData) public var transactionListData: [BudgetSDK.TransactionViewRowData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $transactionListData: Combine.Published<[BudgetSDK.TransactionViewRowData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func showAccountAndDateSection(bankAccounts: [BudgetSDK.Bank]) -> some SwiftUICore.View
  
  public func showStackedBar(configuration: BudgetSDK.StackedBarSectionConfiguration) -> some SwiftUICore.View
  
  public func showSpendingCategorySection() -> some SwiftUICore.View
  
  public func showTransactionSection() -> some SwiftUICore.View
  
  public func buildScreen(bankAccounts: [BudgetSDK.Bank], stackedBarConfiguration: BudgetSDK.StackedBarSectionConfiguration) -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct BudgetDesignTokens {
  public let spacing: BudgetSDK.BudgetDesignTokens.Spacing
  public let cornerRadius: BudgetSDK.BudgetDesignTokens.CornerRadius
  public let shadows: BudgetSDK.BudgetDesignTokens.Shadows
  public let transitions: BudgetSDK.BudgetDesignTokens.Transitions
  public init(spacing: BudgetSDK.BudgetDesignTokens.Spacing = Spacing(), cornerRadius: BudgetSDK.BudgetDesignTokens.CornerRadius = CornerRadius(), shadows: BudgetSDK.BudgetDesignTokens.Shadows = Shadows(), transitions: BudgetSDK.BudgetDesignTokens.Transitions = Transitions())
  public struct Spacing {
    public let xs: CoreFoundation.CGFloat
    public let sm: CoreFoundation.CGFloat
    public let md: CoreFoundation.CGFloat
    public let lg: CoreFoundation.CGFloat
    public let xl: CoreFoundation.CGFloat
    public let xxl: CoreFoundation.CGFloat
    public init(xs: CoreFoundation.CGFloat = 4, sm: CoreFoundation.CGFloat = 8, md: CoreFoundation.CGFloat = 16, lg: CoreFoundation.CGFloat = 24, xl: CoreFoundation.CGFloat = 32, xxl: CoreFoundation.CGFloat = 48)
  }
  public struct CornerRadius {
    public let none: CoreFoundation.CGFloat
    public let sm: CoreFoundation.CGFloat
    public let md: CoreFoundation.CGFloat
    public let lg: CoreFoundation.CGFloat
    public let xl: CoreFoundation.CGFloat
    public let pill: CoreFoundation.CGFloat
    public init(none: CoreFoundation.CGFloat = 0, sm: CoreFoundation.CGFloat = 4, md: CoreFoundation.CGFloat = 8, lg: CoreFoundation.CGFloat = 12, xl: CoreFoundation.CGFloat = 16, pill: CoreFoundation.CGFloat = 9999)
  }
  public struct Shadows {
    public let none: BudgetSDK.BudgetShadow
    public let sm: BudgetSDK.BudgetShadow
    public let md: BudgetSDK.BudgetShadow
    public let lg: BudgetSDK.BudgetShadow
    public let xl: BudgetSDK.BudgetShadow
    public init(none: BudgetSDK.BudgetShadow = BudgetShadow(), sm: BudgetSDK.BudgetShadow = BudgetShadow(color: UIColor.black.withAlphaComponent(0.05), offset: CGSize(width: 0, height: 1), radius: 2, opacity: 1), md: BudgetSDK.BudgetShadow = BudgetShadow(color: UIColor.black.withAlphaComponent(0.07), offset: CGSize(width: 0, height: 2), radius: 4, opacity: 1), lg: BudgetSDK.BudgetShadow = BudgetShadow(color: UIColor.black.withAlphaComponent(0.1), offset: CGSize(width: 0, height: 4), radius: 8, opacity: 1), xl: BudgetSDK.BudgetShadow = BudgetShadow(color: UIColor.black.withAlphaComponent(0.15), offset: CGSize(width: 0, height: 8), radius: 16, opacity: 1))
  }
  public struct Transitions {
    public let fast: Foundation.TimeInterval
    public let normal: Foundation.TimeInterval
    public let slow: Foundation.TimeInterval
    public init(fast: Foundation.TimeInterval = 0.15, normal: Foundation.TimeInterval = 0.25, slow: Foundation.TimeInterval = 0.35)
  }
}
public struct BudgetShadow {
  public let color: UIKit.UIColor
  public let offset: CoreFoundation.CGSize
  public let radius: CoreFoundation.CGFloat
  public let opacity: Swift.Float
  public init(color: UIKit.UIColor = .clear, offset: CoreFoundation.CGSize = .zero, radius: CoreFoundation.CGFloat = 0, opacity: Swift.Float = 0)
}
public class BudgetButtonAppearance {
  public var cornerRadius: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var contentInsets: UIKit.UIEdgeInsets
  public var shadow: BudgetSDK.BudgetShadow
  public var animationDuration: Foundation.TimeInterval
  public init()
  public func resetToDefaults()
  @objc deinit
}
public class BudgetCardAppearance {
  public var cornerRadius: CoreFoundation.CGFloat
  public var shadow: BudgetSDK.BudgetShadow
  public var contentInsets: UIKit.UIEdgeInsets
  public var borderWidth: CoreFoundation.CGFloat
  public init()
  public func resetToDefaults()
  @objc deinit
}
public class BudgetInputAppearance {
  public var cornerRadius: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var contentInsets: UIKit.UIEdgeInsets
  public var borderWidth: CoreFoundation.CGFloat
  public var focusedBorderWidth: CoreFoundation.CGFloat
  public var shadow: BudgetSDK.BudgetShadow
  public init()
  public func resetToDefaults()
  @objc deinit
}
public class BudgetAccessibilityAppearance {
  public var respectsSystemFontSize: Swift.Bool
  public var respectsSystemBoldText: Swift.Bool
  public var respectsSystemContrast: Swift.Bool
  public var minimumTouchTargetSize: CoreFoundation.CGSize
  public var reduceMotion: Swift.Bool
  public init()
  public func resetToDefaults()
  @objc deinit
}
public class BudgetColors {
  public var brand: UIKit.UIColor
  public var background: UIKit.UIColor
  public var surface: UIKit.UIColor
  public var textPrimary: UIKit.UIColor
  public var textSecondary: UIKit.UIColor
  public var textDisabled: UIKit.UIColor
  public var textLink: UIKit.UIColor
  public var buttonPrimaryBackground: UIKit.UIColor
  public var buttonPrimaryForeground: UIKit.UIColor
  public var buttonPrimaryDisabledBackground: UIKit.UIColor
  public var buttonPrimaryDisabledForeground: UIKit.UIColor
  public var buttonSecondaryBackground: UIKit.UIColor
  public var buttonSecondaryForeground: UIKit.UIColor
  public var buttonSecondaryDisabledBackground: UIKit.UIColor
  public var buttonSecondaryDisabledForeground: UIKit.UIColor
  public var buttonOutlineBackground: UIKit.UIColor
  public var buttonOutlineForeground: UIKit.UIColor
  public var buttonOutlineBorder: UIKit.UIColor
  public var buttonOutlineDisabledBackground: UIKit.UIColor
  public var buttonOutlineDisabledForeground: UIKit.UIColor
  public var buttonOutlineDisabledBorder: UIKit.UIColor
  public var buttonDestructiveBackground: UIKit.UIColor
  public var buttonDestructiveForeground: UIKit.UIColor
  public var buttonDestructiveBorder: UIKit.UIColor
  public var buttonDestructiveDisabledBackground: UIKit.UIColor
  public var buttonDestructiveDisabledForeground: UIKit.UIColor
  public var buttonDestructiveDisabledBorder: UIKit.UIColor
  public var checkboxChecked: UIKit.UIColor
  public var checkboxUnchecked: UIKit.UIColor
  public var checkboxDisabled: UIKit.UIColor
  public var formFieldTitleColor: UIKit.UIColor
  public var formFieldForeGroundColor: UIKit.UIColor
  public var error: UIKit.UIColor
  public var warning: UIKit.UIColor
  public var success: UIKit.UIColor
  public var border: UIKit.UIColor
  public var divider: UIKit.UIColor
  public var seperator: UIKit.UIColor
  public var shadow: UIKit.UIColor
  public var negativeAmountColor: UIKit.UIColor
  public var positiveAmount: UIKit.UIColor
  public init()
  public func resetToDefaults()
  @objc deinit
}
public enum BudgetTypographyScale {
  case displayLarge, displayMedium, displaySmall
  case headlineLarge, headlineMedium, headlineSmall
  case titleLarge, titleMedium, titleSmall
  case labelLarge, labelMedium, labelSmall
  case bodyLarge, bodyMedium, bodySmall
  case button, caption, footnote, overline, numeric
  public static func == (a: BudgetSDK.BudgetTypographyScale, b: BudgetSDK.BudgetTypographyScale) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BudgetFontWeight {
  case regular, medium, semibold, bold
  public static func == (a: BudgetSDK.BudgetFontWeight, b: BudgetSDK.BudgetFontWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class BudgetTypography {
  public var displayLarge: UIKit.UIFont {
    get
  }
  public var displayMedium: UIKit.UIFont {
    get
  }
  public var displaySmall: UIKit.UIFont {
    get
  }
  public var headlineLarge: UIKit.UIFont {
    get
  }
  public var headlineMedium: UIKit.UIFont {
    get
  }
  public var headlineSmall: UIKit.UIFont {
    get
  }
  public var titleLarge: UIKit.UIFont {
    get
  }
  public var titleMedium: UIKit.UIFont {
    get
  }
  public var titleSmall: UIKit.UIFont {
    get
  }
  public var labelLarge: UIKit.UIFont {
    get
  }
  public var labelMedium: UIKit.UIFont {
    get
  }
  public var labelSmall: UIKit.UIFont {
    get
  }
  public var bodyLarge: UIKit.UIFont {
    get
  }
  public var bodyMedium: UIKit.UIFont {
    get
  }
  public var bodySmall: UIKit.UIFont {
    get
  }
  public var button: UIKit.UIFont {
    get
  }
  public var caption: UIKit.UIFont {
    get
  }
  public var footnote: UIKit.UIFont {
    get
  }
  public var overline: UIKit.UIFont {
    get
  }
  public var numeric: UIKit.UIFont {
    get
  }
  public init()
  public func configure(with customFontName: Swift.String?)
  @objc deinit
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func budgetFont(_ scale: BudgetSDK.BudgetTypographyScale, weight: BudgetSDK.BudgetFontWeight? = nil) -> some SwiftUICore.View
  
}
extension SwiftUICore.Font {
  public static func budgetFont(_ scale: BudgetSDK.BudgetTypographyScale, weight: BudgetSDK.BudgetFontWeight? = nil) -> SwiftUICore.Font
}
public struct SavingGoalsProgressViewData : Swift.Hashable {
  public init(id: Swift.String, categoryIconURL: Swift.String, categoryName: Swift.String, progress: Swift.Double, formattedAmount: Swift.String, formattedTotalAmount: Swift.String)
  public static func == (a: BudgetSDK.SavingGoalsProgressViewData, b: BudgetSDK.SavingGoalsProgressViewData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MyneTrasnsactionsOverViewDelegate : AnyObject {
  func didTapOnTransactionInSearchResult(transaction: BudgetSDK.TransactionViewRowData)
  func didTaponTransactionInList(transaction: BudgetSDK.TransactionViewRowData)
  func didTapOnFilterButton()
}
public class MyneTrasnsactionsOverViewController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneTrasnsactionsOverViewDelegate)?
  @Combine.Published @_projectedValueProperty($searchtext) public var searchtext: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $searchtext: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($trnsactionListData) public var trnsactionListData: [BudgetSDK.TransactionViewRowData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $trnsactionListData: Combine.Published<[BudgetSDK.TransactionViewRowData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($filteredTransactions) public var filteredTransactions: [BudgetSDK.TransactionViewRowData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $filteredTransactions: Combine.Published<[BudgetSDK.TransactionViewRowData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isSearchActive) public var isSearchActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isSearchActive: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func handleSearchTextChange()
  public func activateSearchIfNeeded()
  public func showSearchField() -> some SwiftUICore.View
  
  public func showTransactionsList(date: Swift.String) -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct CurrencyDataModel : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public let code: Swift.String
  public let symbol: Swift.String
  public init(code: Swift.String, symbol: Swift.String)
  public var displayText: Swift.String {
    get
  }
  public static func == (a: BudgetSDK.CurrencyDataModel, b: BudgetSDK.CurrencyDataModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MyneSpendingCategoryScreenDelegate : AnyObject {
  func didTapOnSaveBankAccounts(bankAccounts: [BudgetSDK.BankAccount])
  func didSelectDateRange(startDate: Foundation.Date?, endDate: Foundation.Date?)
  func didTaponCategory(category: BudgetSDK.SpendingCategoryData)
}
public class MyneSpendingCategoryScreenController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneSpendingCategoryScreenDelegate)?
  @Combine.Published @_projectedValueProperty($spendingCategoriesList) public var spendingCategoriesList: [BudgetSDK.SpendingCategoryData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $spendingCategoriesList: Combine.Published<[BudgetSDK.SpendingCategoryData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($amountSpent) public var amountSpent: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $amountSpent: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func showAccountAndDateSection(bankAccounts: [BudgetSDK.Bank]) -> some SwiftUICore.View
  
  public func showSpendingCategoriesSection() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
final public class SavingGoalsModule : Combine.ObservableObject, BudgetSDK.SavingGoalsModuleProtocol, BudgetSDK.BudgetSDKModuleBase, BudgetSDK.ModuleAccessible {
  final public let moduleType: BudgetSDK.BudgetSDKModule
  final public let accessValidator: any BudgetSDK.ModuleAccessValidator
  required public init(accessValidator: any BudgetSDK.ModuleAccessValidator)
  final public var dashboard: BudgetSDK.MyneSavingGoalsDashboardController? {
    get
  }
  final public var savingGoalsDetails: BudgetSDK.MyneSavingGoalsDetailsController? {
    get
  }
  final public func savingGoalsForm(formState: BudgetSDK.MyneSavingGoalFormController.FormState) -> BudgetSDK.MyneSavingGoalFormController?
  final public func savingGoalIconSelection() -> BudgetSDK.MyneSavingGoalsIconsController?
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public struct SpendingCategoryBoxData {
  public let id: Swift.String
  public let name: Swift.String
  public let iconURL: Swift.String
  public let isSelected: Swift.Bool
  public init(id: Swift.String, name: Swift.String, iconURL: Swift.String, isSelected: Swift.Bool)
}





public struct SavingGoalIconWidgetViewData : Swift.Hashable {
  public var id: Swift.String
  public var iconURL: Swift.String
  public var title: Swift.String
  public var iconBackgroundColor: SwiftUICore.Color
  public init(id: Swift.String, iconURL: Swift.String, title: Swift.String, iconBackgroundColor: SwiftUICore.Color = Color.gray.opacity(0.2))
  public static func == (a: BudgetSDK.SavingGoalIconWidgetViewData, b: BudgetSDK.SavingGoalIconWidgetViewData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}





public struct SpendingLimitProgressViewData : Swift.Hashable {
  public init(id: Swift.String, categoryIconURL: Swift.String, categoryName: Swift.String, spentAmount: Swift.String, targetAmount: Swift.String)
  public static func == (a: BudgetSDK.SpendingLimitProgressViewData, b: BudgetSDK.SpendingLimitProgressViewData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BudgetTheme {
  var colors: BudgetSDK.BudgetColors { get }
  var typography: BudgetSDK.BudgetTypography { get }
  var tokens: BudgetSDK.BudgetDesignTokens { get }
  var button: BudgetSDK.BudgetButtonAppearance { get }
  var card: BudgetSDK.BudgetCardAppearance { get }
  var input: BudgetSDK.BudgetInputAppearance { get }
  var accessibility: BudgetSDK.BudgetAccessibilityAppearance { get }
}
public enum BudgetPredefinedThemes {
  case `default`
  case corporate
  public func theme() -> any BudgetSDK.BudgetTheme
  public static func == (a: BudgetSDK.BudgetPredefinedThemes, b: BudgetSDK.BudgetPredefinedThemes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DefaultTheme : BudgetSDK.BudgetTheme {
  public let colors: BudgetSDK.BudgetColors
  public let typography: BudgetSDK.BudgetTypography
  public let tokens: BudgetSDK.BudgetDesignTokens
  public let button: BudgetSDK.BudgetButtonAppearance
  public let card: BudgetSDK.BudgetCardAppearance
  public let input: BudgetSDK.BudgetInputAppearance
  public let accessibility: BudgetSDK.BudgetAccessibilityAppearance
  public init()
}
public struct CorporateTheme : BudgetSDK.BudgetTheme {
  public let colors: BudgetSDK.BudgetColors
  public let typography: BudgetSDK.BudgetTypography
  public let tokens: BudgetSDK.BudgetDesignTokens
  public let button: BudgetSDK.BudgetButtonAppearance
  public let card: BudgetSDK.BudgetCardAppearance
  public let input: BudgetSDK.BudgetInputAppearance
  public let accessibility: BudgetSDK.BudgetAccessibilityAppearance
  public init()
}
extension BudgetSDK.BudgetSDKAppearance {
  public func apply(theme: any BudgetSDK.BudgetTheme, customFontName: Swift.String? = nil)
}
final public class BudgetSDKConfiguration {
  public static var shared: BudgetSDK.BudgetSDKConfiguration?
  final public let apiKey: Swift.String
  final public let environment: BudgetSDK.BudgetSDKConfiguration.Environment
  final public let enableLogging: Swift.Bool
  final public let localizationTableName: Swift.String?
  final public let locale: Foundation.Locale?
  final public let theme: BudgetSDK.BudgetPredefinedThemes
  final public let brandColor: UIKit.UIColor?
  final public let customFontName: Swift.String?
  final public let customAppearance: ((BudgetSDK.BudgetSDKAppearance) -> Swift.Void)?
  public enum Environment {
    case sandbox
    case production
    public static func == (a: BudgetSDK.BudgetSDKConfiguration.Environment, b: BudgetSDK.BudgetSDKConfiguration.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(apiKey: Swift.String, environment: BudgetSDK.BudgetSDKConfiguration.Environment = .sandbox, enableLogging: Swift.Bool = false, localizationTableName: Swift.String? = nil, locale: Foundation.Locale? = nil, theme: BudgetSDK.BudgetPredefinedThemes = .default, brandColor: UIKit.UIColor? = nil, customFontName: Swift.String? = nil, customAppearance: ((BudgetSDK.BudgetSDKAppearance) -> Swift.Void)? = nil)
  convenience public init(apiKey: Swift.String, brandColor: UIKit.UIColor, theme: BudgetSDK.BudgetPredefinedThemes = .default)
  convenience public init(apiKey: Swift.String, fontName: Swift.String, brandColor: UIKit.UIColor? = nil)
  convenience public init(apiKey: Swift.String)
  @objc deinit
}






public enum TextFieldImageType {
  case systemImage(Swift.String)
  case localImage(Swift.String)
}
@_Concurrency.MainActor @preconcurrency public struct CustomTextField : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(text: SwiftUICore.Binding<Swift.String>, title: Swift.String? = nil, placeholder: Swift.String = "", imageType: BudgetSDK.TextFieldImageType? = nil, keyboardType: UIKit.UIKeyboardType = .default, onImageTap: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9BudgetSDK15CustomTextFieldV4bodyQrvp", 0) __
}
extension BudgetSDK.CustomTextField {
  @_Concurrency.MainActor @preconcurrency public init(text: SwiftUICore.Binding<Swift.String>, title: Swift.String? = nil, placeholder: Swift.String = "")
  @_Concurrency.MainActor @preconcurrency public init(text: SwiftUICore.Binding<Swift.String>, title: Swift.String? = nil, placeholder: Swift.String = "", systemImage: Swift.String, onImageTap: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public init(text: SwiftUICore.Binding<Swift.String>, title: Swift.String? = nil, placeholder: Swift.String = "", localImage: Swift.String, onImageTap: (() -> Swift.Void)? = nil)
}
public class BudgetSDKAppearance : Combine.ObservableObject {
  final public let colors: BudgetSDK.BudgetColors
  final public let typography: BudgetSDK.BudgetTypography
  final public let tokens: BudgetSDK.BudgetDesignTokens
  final public let button: BudgetSDK.BudgetButtonAppearance
  final public let card: BudgetSDK.BudgetCardAppearance
  final public let input: BudgetSDK.BudgetInputAppearance
  final public let accessibility: BudgetSDK.BudgetAccessibilityAppearance
  public init()
  public static let `default`: BudgetSDK.BudgetSDKAppearance
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SwiftUICore.EnvironmentValues {
  public var budgetAppearance: BudgetSDK.BudgetSDKAppearance {
    get
    set
  }
}
public struct BudgetAppearanceKey : SwiftUICore.EnvironmentKey {
  public static let defaultValue: BudgetSDK.BudgetSDKAppearance
  public typealias Value = BudgetSDK.BudgetSDKAppearance
}


public protocol MyneSavingGoalFormControllerDelegate : AnyObject {
  func didTapOnNextButton()
  func didTapOnEditIcon()
  func didTapOnAddIcon()
}
@_hasMissingDesignatedInitializers public class MyneSavingGoalFormController : Combine.ObservableObject {
  public enum FormState {
    case editing
    case creating
    public static func == (a: BudgetSDK.MyneSavingGoalFormController.FormState, b: BudgetSDK.MyneSavingGoalFormController.FormState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  weak public var delegate: (any BudgetSDK.MyneSavingGoalFormControllerDelegate)?
  @Combine.Published @_projectedValueProperty($iconURL) public var iconURL: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $iconURL: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($goalName) public var goalName: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $goalName: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($targetAmount) public var targetAmount: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $targetAmount: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedCurrency) public var selectedCurrency: BudgetSDK.CurrencyDataModel? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedCurrency: Combine.Published<BudgetSDK.CurrencyDataModel?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($targetDate) public var targetDate: Foundation.Date? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $targetDate: Combine.Published<Foundation.Date?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($banks) public var banks: [BudgetSDK.Bank] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $banks: Combine.Published<[BudgetSDK.Bank]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedAccount) public var selectedAccount: BudgetSDK.BankAccount? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedAccount: Combine.Published<BudgetSDK.BankAccount?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showAccountScreen) public var showAccountScreen: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showAccountScreen: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func showFormView() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SpendingWidgetViewData : Swift.Hashable {
  public var id: Swift.String
  public var iconImageName: Swift.String
  public var title: Swift.String
  public var value: Swift.String
  public init(id: Swift.String, iconImageName: Swift.String, title: Swift.String, value: Swift.String)
  public static func == (a: BudgetSDK.SpendingWidgetViewData, b: BudgetSDK.SpendingWidgetViewData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}







public protocol MyneCashFlowDetailsControllerDelegate : AnyObject {
  func didTapOnCharBar(selectedChartItems: [BudgetSDK.ChartDataItem])
}
@_hasMissingDesignatedInitializers public class MyneCashFlowDetailsController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneCashFlowDetailsControllerDelegate)?
  @Combine.Published @_projectedValueProperty($title) public var title: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $title: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($amount) public var amount: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $amount: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($barChartData) public var barChartData: [BudgetSDK.ChartDataItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $barChartData: Combine.Published<[BudgetSDK.ChartDataItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($trnsactionListData) public var trnsactionListData: [BudgetSDK.TransactionViewRowData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $trnsactionListData: Combine.Published<[BudgetSDK.TransactionViewRowData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func showStackedBar(configuration: BudgetSDK.StackedBarSectionConfiguration) -> some SwiftUICore.View
  
  public func showTransactionsList() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct ChartDataItem : Swift.Hashable {
  public init(id: Swift.String, xValue: Swift.String, legendName: Swift.String, barValue: Swift.Double, barFormattedValue: Swift.String, barHexColor: Swift.String)
  public static func == (a: BudgetSDK.ChartDataItem, b: BudgetSDK.ChartDataItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SubcategoryItem : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String
  public let text: Swift.String
  public init(id: Swift.String, text: Swift.String)
  public static func == (a: BudgetSDK.SubcategoryItem, b: BudgetSDK.SubcategoryItem) -> Swift.Bool
  public typealias ID = Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}




public protocol MyneSpendingLimitsDashboardScreenControllerDelegate : AnyObject {
  func didUpdateMonth(currentDate: Foundation.Date)
  func didTapOnNewLimitWidget()
  func didTapOnOverallSpendingLimitWidget()
}
@_hasMissingDesignatedInitializers public class MyneSpendingLimitsDashboardScreenController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneSpendingLimitsDashboardScreenControllerDelegate)?
  @Combine.Published @_projectedValueProperty($showAddNewLimitWidget) public var showAddNewLimitWidget: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showAddNewLimitWidget: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showOverallSpendingLimit) public var showOverallSpendingLimit: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showOverallSpendingLimit: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($spendingLimts) public var spendingLimts: [BudgetSDK.SpendingLimitProgressViewData] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $spendingLimts: Combine.Published<[BudgetSDK.SpendingLimitProgressViewData]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($spendingLimitOverAllData) public var spendingLimitOverAllData: BudgetSDK.SpendingLimitOverallModel {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $spendingLimitOverAllData: Combine.Published<BudgetSDK.SpendingLimitOverallModel>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func showDashboard() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
final public class SpendingLimitsModule : Combine.ObservableObject, BudgetSDK.SpendingLimitsModuleProtocol, BudgetSDK.BudgetSDKModuleBase, BudgetSDK.ModuleAccessible {
  final public let moduleType: BudgetSDK.BudgetSDKModule
  final public let accessValidator: any BudgetSDK.ModuleAccessValidator
  required public init(accessValidator: any BudgetSDK.ModuleAccessValidator)
  final public var dashboard: BudgetSDK.MyneSpendingLimitsDashboardScreenController? {
    get
  }
  final public var createLimit: BudgetSDK.MyneSpendingLimitCreationScreenController? {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol MyneSubCategoryScreenControllerDelegate : AnyObject {
  func didSelectSubcategory(_ subcategory: BudgetSDK.SubcategoryItem)
  func didCancelSubcategorySelection()
  func didSaveSubcategorySelection(_ subcategory: BudgetSDK.SubcategoryItem?)
}
public class MyneSubCategoryScreenController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneSubCategoryScreenControllerDelegate)?
  @Combine.Published @_projectedValueProperty($subcategories) public var subcategories: [BudgetSDK.SubcategoryItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $subcategories: Combine.Published<[BudgetSDK.SubcategoryItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedSubcategory) public var selectedSubcategory: BudgetSDK.SubcategoryItem? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedSubcategory: Combine.Published<BudgetSDK.SubcategoryItem?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func showScreen() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public protocol MyneCashFlowDashboardControllerDelegate : AnyObject {
  func didTapOnSaveBankAccounts(bankAccounts: [BudgetSDK.BankAccount])
  func didSelectDateRange(startDate: Foundation.Date?, endDate: Foundation.Date?)
  func didTapOnChartBar(items: [BudgetSDK.ChartDataItem])
  func didTapOnTotalIncomeWidget()
  func didTapOnCategoryIncomeWidget(data: BudgetSDK.CashFlowStreamWidgetData.Data)
  func didTapOnTotalExpenseWidget()
  func didTapOnCategoryExpenseWidget(data: BudgetSDK.CashFlowStreamWidgetData.Data)
}
public class MyneCashFlowDashboardController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneCashFlowDashboardControllerDelegate)?
  @Combine.Published @_projectedValueProperty($stackedBarChartItems) public var stackedBarChartItems: [BudgetSDK.ChartDataItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $stackedBarChartItems: Combine.Published<[BudgetSDK.ChartDataItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($incomeStreamData) public var incomeStreamData: BudgetSDK.CashFlowStreamWidgetData? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $incomeStreamData: Combine.Published<BudgetSDK.CashFlowStreamWidgetData?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($expenseStreamData) public var expenseStreamData: BudgetSDK.CashFlowStreamWidgetData? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $expenseStreamData: Combine.Published<BudgetSDK.CashFlowStreamWidgetData?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($netDifferenceStreamData) public var netDifferenceStreamData: BudgetSDK.CashFlowStreamWidgetData? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $netDifferenceStreamData: Combine.Published<BudgetSDK.CashFlowStreamWidgetData?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func showAccountAndDateSection(bankAccounts: [BudgetSDK.Bank]) -> some SwiftUICore.View
  
  public func showStackedBar(configuration: BudgetSDK.StackedBarSectionConfiguration) -> some SwiftUICore.View
  
  public func showCashFlowStreamWidgets() -> some SwiftUICore.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct FilterType : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String
  public let title: Swift.String
  public init(id: Swift.String, title: Swift.String)
  public static func == (a: BudgetSDK.FilterType, b: BudgetSDK.FilterType) -> Swift.Bool
  public typealias ID = Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GroupedFilter : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public let title: Swift.String
  public let filterTypes: [BudgetSDK.FilterType]
  public init(title: Swift.String, filterTypes: [BudgetSDK.FilterType])
  public static func == (a: BudgetSDK.GroupedFilter, b: BudgetSDK.GroupedFilter) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CashFlowStreamWidgetData : Swift.Hashable {
  public struct Data : Swift.Hashable {
    public let title: Swift.String
    public let value: Swift.String
    public init(title: Swift.String, value: Swift.String)
    public static func == (a: BudgetSDK.CashFlowStreamWidgetData.Data, b: BudgetSDK.CashFlowStreamWidgetData.Data) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(arrowImageName: Swift.String?, streamTitle: Swift.String, value: Swift.String, data: [BudgetSDK.CashFlowStreamWidgetData.Data])
  public static func == (a: BudgetSDK.CashFlowStreamWidgetData, b: BudgetSDK.CashFlowStreamWidgetData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

public protocol MyneSavingGoalsDetailsControllerDelegate : AnyObject {
  func didTapOnDeleteButton()
}
@_hasMissingDesignatedInitializers public class MyneSavingGoalsDetailsController : Combine.ObservableObject {
  weak public var delegate: (any BudgetSDK.MyneSavingGoalsDetailsControllerDelegate)?
  @Combine.Published @_projectedValueProperty($savedAmount) public var savedAmount: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $savedAmount: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($targetAmount) public var targetAmount: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $targetAmount: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($account) public var account: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $account: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($targetDate) public var targetDate: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $targetDate: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($daysLeft) public var daysLeft: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $daysLeft: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func buildScreen() -> some SwiftUICore.View
  
  public var progressValue: Swift.Double {
    get
  }
  public var percentageValue: Swift.String {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum BudgetSDKError : Swift.Error, Foundation.LocalizedError {
  case notConfigured
  case moduleNotAvailable(module: Swift.String)
  case authenticationFailed
  case networkError(underlying: (any Swift.Error)?)
  case validationError(field: Swift.String, reason: Swift.String)
  case unknown
  public var errorDescription: Swift.String? {
    get
  }
}
public enum BudgetSDKModule : Swift.String, Swift.CaseIterable {
  case spending
  case cashFlow
  case spendingLimits
  case savingGoals
  public var displayName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BudgetSDK.BudgetSDKModule]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [BudgetSDK.BudgetSDKModule] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol SpendingModuleProtocol {
  var dashboard: BudgetSDK.MyneDashboardScreenController? { get }
  var spendingCategory: BudgetSDK.MyneSpendingCategoryScreenController? { get }
  var category: BudgetSDK.MyneCategoryViewScreenController? { get }
  var trending: BudgetSDK.MyneTrendViewScreenController? { get }
  var transactionsOverView: BudgetSDK.MyneTrasnsactionsOverViewController? { get }
  var filter: BudgetSDK.MyneFilterScreenController? { get }
  var transactionDetails: BudgetSDK.MyneTransactionDetailsScreenController? { get }
  var transactionCategory: BudgetSDK.MyneTransactionCategoryScreenController? { get }
  var subCategory: BudgetSDK.MyneSubCategoryScreenController? { get }
}
public protocol CashFlowModuleProtocol {
  var dashboard: BudgetSDK.MyneCashFlowDashboardController? { get }
  var details: BudgetSDK.MyneCashFlowDetailsController? { get }
}
public protocol SavingGoalsModuleProtocol {
  var dashboard: BudgetSDK.MyneSavingGoalsDashboardController? { get }
  var savingGoalsDetails: BudgetSDK.MyneSavingGoalsDetailsController? { get }
  func savingGoalsForm(formState: BudgetSDK.MyneSavingGoalFormController.FormState) -> BudgetSDK.MyneSavingGoalFormController?
  func savingGoalIconSelection() -> BudgetSDK.MyneSavingGoalsIconsController?
}
public protocol SpendingLimitsModuleProtocol {
  var dashboard: BudgetSDK.MyneSpendingLimitsDashboardScreenController? { get }
  var createLimit: BudgetSDK.MyneSpendingLimitCreationScreenController? { get }
}
public protocol ModuleAccessValidator {
  func validateAccess(for module: BudgetSDK.BudgetSDKModule) -> Swift.Bool
  func isModuleAvailable(_ module: BudgetSDK.BudgetSDKModule) -> Swift.Bool
}
public protocol BudgetSDKModuleBase {
  var moduleType: BudgetSDK.BudgetSDKModule { get }
  var accessValidator: any BudgetSDK.ModuleAccessValidator { get }
  init(accessValidator: any BudgetSDK.ModuleAccessValidator)
}
public protocol ModuleAccessible {
  func validateModuleAccess() -> Swift.Bool
  func isModuleAvailable() -> Swift.Bool
}
extension BudgetSDK.ModuleAccessible where Self : BudgetSDK.BudgetSDKModuleBase {
  public func validateModuleAccess() -> Swift.Bool
  public func isModuleAvailable() -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class Budget {
  public static let shared: BudgetSDK.Budget
  public static let appearance: BudgetSDK.BudgetSDKAppearance
  final public var spending: any BudgetSDK.SpendingModuleProtocol {
    get
    set
  }
  final public var cashFlow: any BudgetSDK.CashFlowModuleProtocol {
    get
    set
  }
  final public var savingGoals: any BudgetSDK.SavingGoalsModuleProtocol {
    get
    set
  }
  final public var spendingLimits: any BudgetSDK.SpendingLimitsModuleProtocol {
    get
    set
  }
  final public var isConfigured: Swift.Bool {
    get
  }
  public static let version: Swift.String
  final public var availableModules: [BudgetSDK.BudgetSDKModule] {
    get
  }
  final public func isModuleAvailable(_ module: BudgetSDK.BudgetSDKModule) -> Swift.Bool
  final public var language: Swift.String? {
    get
  }
  @objc deinit
}
extension BudgetSDK.Budget {
  final public func configure(with configuration: BudgetSDK.BudgetSDKConfiguration)
  final public func setLanguage(_ languageCode: Swift.String)
  final public func reset()
}
public enum SDKLocalization {
  public static var currentLanguage: Swift.String {
    get
  }
  public static var layoutDirection: SwiftUICore.LayoutDirection {
    get
  }
}


public struct SpendingCategoryModel : Swift.Hashable {
  public init(id: Swift.String, iconURL: Swift.String, iconBackgroundColor: SwiftUICore.Color, title: Swift.String, currentValue: Swift.Int, isRepeatEnabled: Swift.Bool)
  public static func == (a: BudgetSDK.SpendingCategoryModel, b: BudgetSDK.SpendingCategoryModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BankAccount : Swift.Hashable {
  public let accountID: Swift.String
  public let bankName: Swift.String
  public let accountType: Swift.String
  public let accountNumber: Swift.String
  public let balance: Swift.String
  public init(accountID: Swift.String, bankName: Swift.String, accountType: Swift.String, accountNumber: Swift.String, balance: Swift.String)
  public static func == (a: BudgetSDK.BankAccount, b: BudgetSDK.BankAccount) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Bank : Swift.Hashable {
  public let id: Swift.String
  public let name: Swift.String
  public let icon: Swift.String
  public let accounts: [BudgetSDK.BankAccount]
  public var accountCount: Swift.Int {
    get
  }
  public init(id: Swift.String, name: Swift.String, icon: Swift.String, accounts: [BudgetSDK.BankAccount])
  public static func == (a: BudgetSDK.Bank, b: BudgetSDK.Bank) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AccountAndDateView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(banksData: [BudgetSDK.Bank], preSelectedAccounts: [BudgetSDK.BankAccount] = [], preSelectedStartDate: Foundation.Date? = nil, preSelectedEndDate: Foundation.Date? = nil, onAccountsChanged: (([BudgetSDK.BankAccount]) -> Swift.Void)? = nil, onDateTapped: ((Foundation.Date?, Foundation.Date?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func setSelectedAccounts(_ accountIds: Swift.Set<Swift.String>)
  @_Concurrency.MainActor @preconcurrency public func setSelectedAccounts(_ accounts: [BudgetSDK.BankAccount])
  @_Concurrency.MainActor @preconcurrency public func getSelectedAccounts() -> [BudgetSDK.BankAccount]
  @_Concurrency.MainActor @preconcurrency public func getSelectedAccountIds() -> Swift.Set<Swift.String>
  @_Concurrency.MainActor @preconcurrency public func clearSelection()
  @_Concurrency.MainActor @preconcurrency public func selectAllAccounts()
  @_Concurrency.MainActor @preconcurrency public func getSelectedDateRange() -> (startDate: Foundation.Date?, endDate: Foundation.Date?)
  @_Concurrency.MainActor @preconcurrency public func setSelectedDateRange(startDate: Foundation.Date?, endDate: Foundation.Date?)
  @_Concurrency.MainActor @preconcurrency public func clearDateSelection()
  public typealias Body = @_opaqueReturnTypeOf("$s9BudgetSDK18AccountAndDateViewV4bodyQrvp", 0) __
}
public enum BankAccountSelectionMode {
  case single
  case multiple
  public static func == (a: BudgetSDK.BankAccountSelectionMode, b: BudgetSDK.BankAccountSelectionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct BankAccountsSelectionView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(banksData: [BudgetSDK.Bank], selectionMode: BudgetSDK.BankAccountSelectionMode = .multiple, preSelectedAccountIds: Swift.Set<Swift.String> = [], onSave: @escaping (Swift.Int, [BudgetSDK.BankAccount]) -> Swift.Void, onCancel: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9BudgetSDK25BankAccountsSelectionViewV4bodyQrvp", 0) __
}





public struct StackedBarSectionConfiguration {
  public init(barWidth: CoreFoundation.CGFloat, chartHeight: CoreFoundation.CGFloat, showLegends: Swift.Bool, canShowPopup: Swift.Bool, selectedBarColor: Swift.String?)
}
extension BudgetSDK.DateSelectorFieldView : Swift.Sendable {}
extension BudgetSDK.CurrencySelectorFieldView : Swift.Sendable {}
extension BudgetSDK.BankAccountSelectorFieldView : Swift.Sendable {}
extension BudgetSDK.BudgetTypographyScale : Swift.Equatable {}
extension BudgetSDK.BudgetTypographyScale : Swift.Hashable {}
extension BudgetSDK.BudgetFontWeight : Swift.Equatable {}
extension BudgetSDK.BudgetFontWeight : Swift.Hashable {}
extension BudgetSDK.BudgetPredefinedThemes : Swift.Equatable {}
extension BudgetSDK.BudgetPredefinedThemes : Swift.Hashable {}
extension BudgetSDK.BudgetSDKConfiguration.Environment : Swift.Equatable {}
extension BudgetSDK.BudgetSDKConfiguration.Environment : Swift.Hashable {}
extension BudgetSDK.CustomTextField : Swift.Sendable {}
extension BudgetSDK.MyneSavingGoalFormController.FormState : Swift.Equatable {}
extension BudgetSDK.MyneSavingGoalFormController.FormState : Swift.Hashable {}
extension BudgetSDK.BudgetSDKModule : Swift.Equatable {}
extension BudgetSDK.BudgetSDKModule : Swift.Hashable {}
extension BudgetSDK.BudgetSDKModule : Swift.RawRepresentable {}
extension BudgetSDK.AccountAndDateView : Swift.Sendable {}
extension BudgetSDK.BankAccountSelectionMode : Swift.Equatable {}
extension BudgetSDK.BankAccountSelectionMode : Swift.Hashable {}
extension BudgetSDK.BankAccountsSelectionView : Swift.Sendable {}
